#include "Player.h"

#include "mod_progression.h"

void ProgressionMgr::LoadResource(uint8 team, uint8 type, uint32 current_id, uint32 target_id, uint32 target_value, uint32 state)
{
    resources[team][type][RESOURCE_CURRENT_ID] = current_id;
    resources[team][type][RESOURCE_CURRENT_VALUE] = !sWorld->getWorldState(state) ? 0 : sWorld->getWorldState(state);
    resources[team][type][RESOURCE_TARGET_ID] = target_id;
    resources[team][type][RESOURCE_TARGET_VALUE] = target_value;
    resources[team][type][RESOURCE_STATE] = state;
}

void ProgressionMgr::LoadAllResources()
{
    warEffortStage = !sWorld->getWorldState(STAGE_WAR_EFFORT) ? 0 : sWorld->getWorldState(STAGE_WAR_EFFORT);

    // Metal
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_COPPER_BARS, RESOURCE_ITEM_COPPER_BARS_CURRENT_A, RESOURCE_ITEM_COPPER_BARS_TARGET, RESOURCE_TARGET_COPPER_BARS, RESOURCE_STATE_COPPER_BARS_A);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_COPPER_BARS, RESOURCE_ITEM_COPPER_BARS_CURRENT_H, RESOURCE_ITEM_COPPER_BARS_TARGET, RESOURCE_TARGET_COPPER_BARS, RESOURCE_STATE_COPPER_BARS_H);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_TIN_BARS, RESOURCE_ITEM_TIN_BARS_CURRENT, RESOURCE_ITEM_TIN_BARS_TARGET, RESOURCE_TARGET_TIN_BARS, RESOURCE_STATE_TIN_BARS);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_MITHRIL_BARS, RESOURCE_ITEM_MITHRIL_BARS_CURRENT, RESOURCE_ITEM_MITHRIL_BARS_TARGET, RESOURCE_TARGET_MITHRIL_BARS, RESOURCE_STATE_MITHRIL_BARS);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_IRON_BARS, RESOURCE_ITEM_IRON_BARS_CURRENT, RESOURCE_ITEM_IRON_BARS_TARGET, RESOURCE_TARGET_IRON_BARS, RESOURCE_STATE_IRON_BARS);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_THORIUM_BARS, RESOURCE_ITEM_THORIUM_BARS_CURRENT, RESOURCE_ITEM_THORIUM_BARS_TARGET, RESOURCE_TARGET_THORIUM_BARS, RESOURCE_STATE_THORIUM_BARS);

    // Herbs
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_PEACEBLOOM, RESOURCE_ITEM_PEACEBLOOM_CURRENT, RESOURCE_ITEM_PEACEBLOOM_TARGET, RESOURCE_TARGET_PEACEBLOOM, RESOURCE_STATE_PEACEBLOOM);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_FIREBLOOM, RESOURCE_ITEM_FIREBLOOM_CURRENT, RESOURCE_ITEM_FIREBLOOM_TARGET, RESOURCE_TARGET_FIREBLOOM, RESOURCE_STATE_FIREBLOOM);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_PURPLE_LOTUS, RESOURCE_ITEM_PURPLE_LOTUS_CURRENT_A, RESOURCE_ITEM_PURPLE_LOTUS_TARGET, RESOURCE_TARGET_PURPLE_LOTUS, RESOURCE_STATE_PURPLE_LOTUS_A);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_PURPLE_LOTUS, RESOURCE_ITEM_PURPLE_LOTUS_CURRENT_H, RESOURCE_ITEM_PURPLE_LOTUS_TARGET, RESOURCE_TARGET_PURPLE_LOTUS, RESOURCE_STATE_PURPLE_LOTUS_H);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_STRANGLEKELP, RESOURCE_ITEM_STRANGLEKELP_CURRENT, RESOURCE_ITEM_STRANGLEKELP_TARGET, RESOURCE_TARGET_STRANGLEKELP, RESOURCE_STATE_STRANGLEKELP);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_ARTHAS_TEARS, RESOURCE_ITEM_ARTHAS_TEARS_CURRENT, RESOURCE_ITEM_ARTHAS_TEARS_TARGET, RESOURCE_TARGET_ARTHAS_TEARS, RESOURCE_STATE_ARTHAS_TEARS);

    // Leather
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_HEAVY_LEATHER, RESOURCE_ITEM_HEAVY_LEATHER_CURRENT, RESOURCE_ITEM_HEAVY_LEATHER_TARGET, RESOURCE_TARGET_HEAVY_LEATHER, RESOURCE_STATE_HEAVY_LEATHER);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_THICK_LEATHER, RESOURCE_ITEM_THICK_LEATHER_CURRENT_A, RESOURCE_ITEM_THICK_LEATHER_TARGET, RESOURCE_TARGET_THICK_LEATHER, RESOURCE_STATE_THICK_LEATHER_A);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_THICK_LEATHER, RESOURCE_ITEM_THICK_LEATHER_CURRENT_H, RESOURCE_ITEM_THICK_LEATHER_TARGET, RESOURCE_TARGET_THICK_LEATHER, RESOURCE_STATE_THICK_LEATHER_H);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_RUGGED_LEATHER, RESOURCE_ITEM_RUGGED_LEATHER_CURRENT, RESOURCE_ITEM_RUGGED_LEATHER_TARGET, RESOURCE_TARGET_RUGGED_LEATHER, RESOURCE_STATE_RUGGED_LEATHER);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_LIGHT_LEATHER, RESOURCE_ITEM_LIGHT_LEATHER_CURRENT, RESOURCE_ITEM_LIGHT_LEATHER_TARGET, RESOURCE_TARGET_LIGHT_LEATHER, RESOURCE_STATE_LIGHT_LEATHER);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_MEDIUM_LEATHER, RESOURCE_ITEM_MEDIUM_LEATHER_CURRENT, RESOURCE_ITEM_MEDIUM_LEATHER_TARGET, RESOURCE_TARGET_MEDIUM_LEATHER, RESOURCE_STATE_MEDIUM_LEATHER);

    // Bandages
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_WOOL_BANDAGE, RESOURCE_ITEM_WOOL_BANDAGE_CURRENT, RESOURCE_ITEM_WOOL_BANDAGE_TARGET, RESOURCE_TARGET_WOOL_BANDAGE, RESOURCE_STATE_WOOL_BANDAGE);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_MAGEWEAVE_BANDAGE, RESOURCE_ITEM_MAGEWEAVE_BANDAGE_CURRENT, RESOURCE_ITEM_MAGEWEAVE_BANDAGE_TARGET, RESOURCE_TARGET_MAGEWEAVE_BANDAGE, RESOURCE_STATE_MAGEWEAVE_BANDAGE);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_RUNECLOTH_BANDAGE, RESOURCE_ITEM_RUNECLOTH_BANDAGE_CURRENT_A, RESOURCE_ITEM_RUNECLOTH_BANDAGE_TARGET, RESOURCE_TARGET_RUNECLOTH_BANDAGE, RESOURCE_STATE_RUNECLOTH_BANDAGE_A);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_RUNECLOTH_BANDAGE, RESOURCE_ITEM_RUNECLOTH_BANDAGE_CURRENT_H, RESOURCE_ITEM_RUNECLOTH_BANDAGE_TARGET, RESOURCE_TARGET_RUNECLOTH_BANDAGE, RESOURCE_STATE_RUNECLOTH_BANDAGE_H);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_LINEN_BANDAGE, RESOURCE_ITEM_LINEN_BANDAGE_CURRENT, RESOURCE_ITEM_LINEN_BANDAGE_TARGET, RESOURCE_TARGET_LINEN_BANDAGE, RESOURCE_STATE_LINEN_BANDAGE);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_SILK_BANDAGE, RESOURCE_ITEM_SILK_BANDAGE_CURRENT, RESOURCE_ITEM_SILK_BANDAGE_TARGET, RESOURCE_TARGET_SILK_BANDAGE, RESOURCE_STATE_SILK_BANDAGE);

    // Food
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_LEAN_WOLF_STEAK, RESOURCE_ITEM_LEAN_WOLF_STEAK_CURRENT, RESOURCE_ITEM_LEAN_WOLF_STEAK_TARGET, RESOURCE_TARGET_LEAN_WOLF_STEAK, RESOURCE_STATE_LEAN_WOLF_STEAK);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_SPOTTED_YELLOWTAIL, RESOURCE_ITEM_SPOTTED_YELLOWTAIL_CURRENT_A, RESOURCE_ITEM_SPOTTED_YELLOWTAIL_TARGET, RESOURCE_TARGET_SPOTTED_YELLOWTAIL, RESOURCE_STATE_SPOTTED_YELLOWTAIL_A);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_SPOTTED_YELLOWTAIL, RESOURCE_ITEM_SPOTTED_YELLOWTAIL_CURRENT_H, RESOURCE_ITEM_SPOTTED_YELLOWTAIL_TARGET, RESOURCE_TARGET_SPOTTED_YELLOWTAIL, RESOURCE_STATE_SPOTTED_YELLOWTAIL_H);
    LoadResource(TEAM_HORDE, RESOURCE_TYPE_BAKED_SALMON, RESOURCE_ITEM_BAKED_SALMON_CURRENT, RESOURCE_ITEM_BAKED_SALMON_TARGET, RESOURCE_TARGET_BAKED_SALMON, RESOURCE_STATE_BAKED_SALMON);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_RAINBOW_FIN_ALBACORE, RESOURCE_ITEM_RAINBOW_FIN_ALBACORE_CURRENT, RESOURCE_ITEM_RAINBOW_FIN_ALBACORE_TARGET, RESOURCE_TARGET_RAINBOW_FIN_ALBACORE, RESOURCE_STATE_RAINBOW_FIN_ALBACORE);
    LoadResource(TEAM_ALLIANCE, RESOURCE_TYPE_ROAST_RAPTOR, RESOURCE_ITEM_ROAST_RAPTOR_CURRENT, RESOURCE_ITEM_ROAST_RAPTOR_TARGET, RESOURCE_TARGET_ROAST_RAPTOR, RESOURCE_STATE_ROAST_RAPTOR);
}

void ProgressionMgr::SaveResource(uint8 team, uint8 type)
{
    uint32* resource = GetResource(team, type);
    if (resource && resource[RESOURCE_STATE] > 0)
    {
        sWorld->setWorldState(resource[RESOURCE_STATE], resource[RESOURCE_CURRENT_VALUE]);
    }
}

void ProgressionMgr::SaveAllResources()
{
    sWorld->setWorldState(STAGE_WAR_EFFORT, warEffortStage);

    for (int i = 0; i < MAX_RESOURCE_TYPES; i++)
    {
        SaveResource(TEAM_HORDE, i);
        SaveResource(TEAM_ALLIANCE, i);
    }
}

void ProgressionMgr::SendResourceToPlayer(Player* player, uint8 team, uint8 type)
{
    if (uint32* resource = GetResource(team, type))
    {
        player->SendUpdateWorldState(resource[RESOURCE_CURRENT_ID], resource[RESOURCE_CURRENT_VALUE]);
        player->SendUpdateWorldState(resource[RESOURCE_TARGET_ID], resource[RESOURCE_TARGET_VALUE]);
    }
}
