#include "Player.h"

#include "mod_progression.h"

void ProgressionMgr::LoadAllResources()
{
    // Metal Bars
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_METAL_BARS, RESOURCE_STATE_COPPER_BARS_CURRENT_A, !sWorld->getWorldState(RESOURCE_STATE_COPPER_BARS_A) ? 0 : sWorld->getWorldState(RESOURCE_STATE_COPPER_BARS_A), RESOURCE_STATE_COPPER_BARS_REQUIRED, RESOURCE_REQUIRED_COPPER_BARS, RESOURCE_STATE_COPPER_BARS_A));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_METAL_BARS, RESOURCE_STATE_COPPER_BARS_CURRENT_H, !sWorld->getWorldState(RESOURCE_STATE_COPPER_BARS_H) ? 0 : sWorld->getWorldState(RESOURCE_STATE_COPPER_BARS_H), RESOURCE_STATE_COPPER_BARS_REQUIRED, RESOURCE_REQUIRED_COPPER_BARS, RESOURCE_STATE_COPPER_BARS_H));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_METAL_BARS, RESOURCE_STATE_TIN_BARS_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_TIN_BARS) ? 0 : sWorld->getWorldState(RESOURCE_STATE_TIN_BARS), RESOURCE_STATE_TIN_BARS_REQUIRED, RESOURCE_REQUIRED_TIN_BARS, RESOURCE_STATE_TIN_BARS));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_METAL_BARS, RESOURCE_STATE_MITHRIL_BARS_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_MITHRIL_BARS) ? 0 : sWorld->getWorldState(RESOURCE_STATE_MITHRIL_BARS), RESOURCE_STATE_MITHRIL_BARS_REQUIRED, RESOURCE_REQUIRED_MITHRIL_BARS, RESOURCE_STATE_MITHRIL_BARS));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_METAL_BARS, RESOURCE_STATE_IRON_BARS_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_IRON_BARS) ? 0 : sWorld->getWorldState(RESOURCE_STATE_IRON_BARS), RESOURCE_STATE_IRON_BARS_REQUIRED, RESOURCE_REQUIRED_IRON_BARS, RESOURCE_STATE_IRON_BARS));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_METAL_BARS, RESOURCE_STATE_THORIUM_BARS_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_THORIUM_BARS) ? 0 : sWorld->getWorldState(RESOURCE_STATE_THORIUM_BARS), RESOURCE_STATE_THORIUM_BARS_REQUIRED, RESOURCE_REQUIRED_THORIUM_BARS, RESOURCE_STATE_THORIUM_BARS));

    // Herbs
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_HERBS, RESOURCE_STATE_PEACEBLOOM_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_PEACEBLOOM) ? 0 : sWorld->getWorldState(RESOURCE_STATE_PEACEBLOOM), RESOURCE_STATE_PEACEBLOOM_REQUIRED, RESOURCE_REQUIRED_PEACEBLOOM, RESOURCE_STATE_PEACEBLOOM));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_HERBS, RESOURCE_STATE_FIREBLOOM_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_FIREBLOOM) ? 0 : sWorld->getWorldState(RESOURCE_STATE_FIREBLOOM), RESOURCE_STATE_FIREBLOOM_REQUIRED, RESOURCE_REQUIRED_FIREBLOOM, RESOURCE_STATE_FIREBLOOM));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_HERBS, RESOURCE_STATE_PURPLE_LOTUS_CURRENT_A, !sWorld->getWorldState(RESOURCE_STATE_PURPLE_LOTUS_A) ? 0 : sWorld->getWorldState(RESOURCE_STATE_PURPLE_LOTUS_A), RESOURCE_STATE_PURPLE_LOTUS_REQUIRED, RESOURCE_REQUIRED_PURPLE_LOTUS, RESOURCE_STATE_PURPLE_LOTUS_A));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_HERBS, RESOURCE_STATE_PURPLE_LOTUS_CURRENT_H, !sWorld->getWorldState(RESOURCE_STATE_PURPLE_LOTUS_H) ? 0 : sWorld->getWorldState(RESOURCE_STATE_PURPLE_LOTUS_H), RESOURCE_STATE_PURPLE_LOTUS_REQUIRED, RESOURCE_REQUIRED_PURPLE_LOTUS, RESOURCE_STATE_PURPLE_LOTUS_H));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_HERBS, RESOURCE_STATE_STRANGLEKELP_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_STRANGLEKELP) ? 0 : sWorld->getWorldState(RESOURCE_STATE_STRANGLEKELP), RESOURCE_STATE_STRANGLEKELP_REQUIRED, RESOURCE_REQUIRED_STRANGLEKELP, RESOURCE_STATE_STRANGLEKELP));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_HERBS, RESOURCE_STATE_ARTHAS_TEARS_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_ARTHAS_TEARS) ? 0 : sWorld->getWorldState(RESOURCE_STATE_ARTHAS_TEARS), RESOURCE_STATE_ARTHAS_TEARS_REQUIRED, RESOURCE_REQUIRED_ARTHAS_TEARS, RESOURCE_STATE_ARTHAS_TEARS));

    // Leather Skins
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_LEATHER_SKINS, RESOURCE_STATE_HEAVY_LEATHER_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_HEAVY_LEATHER) ? 0 : sWorld->getWorldState(RESOURCE_STATE_HEAVY_LEATHER), RESOURCE_STATE_HEAVY_LEATHER_REQUIRED, RESOURCE_REQUIRED_HEAVY_LEATHER, RESOURCE_STATE_HEAVY_LEATHER));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_LEATHER_SKINS, RESOURCE_STATE_THICK_LEATHER_CURRENT_A, !sWorld->getWorldState(RESOURCE_STATE_THICK_LEATHER_A) ? 0 : sWorld->getWorldState(RESOURCE_STATE_THICK_LEATHER_A), RESOURCE_STATE_THICK_LEATHER_REQUIRED, RESOURCE_REQUIRED_THICK_LEATHER, RESOURCE_STATE_THICK_LEATHER_A));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_LEATHER_SKINS, RESOURCE_STATE_THICK_LEATHER_CURRENT_H, !sWorld->getWorldState(RESOURCE_STATE_THICK_LEATHER_H) ? 0 : sWorld->getWorldState(RESOURCE_STATE_THICK_LEATHER_H), RESOURCE_STATE_THICK_LEATHER_REQUIRED, RESOURCE_REQUIRED_THICK_LEATHER, RESOURCE_STATE_THICK_LEATHER_H));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_LEATHER_SKINS, RESOURCE_STATE_RUGGED_LEATHER_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_RUGGED_LEATHER) ? 0 : sWorld->getWorldState(RESOURCE_STATE_RUGGED_LEATHER), RESOURCE_STATE_RUGGED_LEATHER_REQUIRED, RESOURCE_REQUIRED_RUGGED_LEATHER, RESOURCE_STATE_RUGGED_LEATHER));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_LEATHER_SKINS, RESOURCE_STATE_LIGHT_LEATHER_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_LIGHT_LEATHER) ? 0 : sWorld->getWorldState(RESOURCE_STATE_LIGHT_LEATHER), RESOURCE_STATE_LIGHT_LEATHER_REQUIRED, RESOURCE_REQUIRED_LIGHT_LEATHER, RESOURCE_STATE_LIGHT_LEATHER));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_LEATHER_SKINS, RESOURCE_STATE_MEDIUM_LEATHER_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_MEDIUM_LEATHER) ? 0 : sWorld->getWorldState(RESOURCE_STATE_MEDIUM_LEATHER), RESOURCE_STATE_MEDIUM_LEATHER_REQUIRED, RESOURCE_REQUIRED_MEDIUM_LEATHER, RESOURCE_STATE_MEDIUM_LEATHER));

    // Bandages
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_BANDAGES, RESOURCE_STATE_WOOL_BANDAGE_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_WOOL_BANDAGE) ? 0 : sWorld->getWorldState(RESOURCE_STATE_WOOL_BANDAGE), RESOURCE_STATE_WOOL_BANDAGE_REQUIRED, RESOURCE_REQUIRED_WOOL_BANDAGE, RESOURCE_STATE_WOOL_BANDAGE));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_BANDAGES, RESOURCE_STATE_MAGEWEAVE_BANDAGE_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_MAGEWEAVE_BANDAGE) ? 0 : sWorld->getWorldState(RESOURCE_STATE_MAGEWEAVE_BANDAGE), RESOURCE_STATE_MAGEWEAVE_BANDAGE_REQUIRED, RESOURCE_REQUIRED_MAGEWEAVE_BANDAGE, RESOURCE_STATE_MAGEWEAVE_BANDAGE));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_BANDAGES, RESOURCE_STATE_RUNECLOTH_BANDAGE_CURRENT_A, !sWorld->getWorldState(RESOURCE_STATE_RUNECLOTH_BANDAGE_A) ? 0 : sWorld->getWorldState(RESOURCE_STATE_RUNECLOTH_BANDAGE_A), RESOURCE_STATE_RUNECLOTH_BANDAGE_REQUIRED, RESOURCE_REQUIRED_RUNECLOTH_BANDAGE, RESOURCE_STATE_RUNECLOTH_BANDAGE_A));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_BANDAGES, RESOURCE_STATE_RUNECLOTH_BANDAGE_CURRENT_H, !sWorld->getWorldState(RESOURCE_STATE_RUNECLOTH_BANDAGE_H) ? 0 : sWorld->getWorldState(RESOURCE_STATE_RUNECLOTH_BANDAGE_H), RESOURCE_STATE_RUNECLOTH_BANDAGE_REQUIRED, RESOURCE_REQUIRED_RUNECLOTH_BANDAGE, RESOURCE_STATE_RUNECLOTH_BANDAGE_H));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_BANDAGES, RESOURCE_STATE_LINEN_BANDAGE_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_LINEN_BANDAGE) ? 0 : sWorld->getWorldState(RESOURCE_STATE_LINEN_BANDAGE), RESOURCE_STATE_LINEN_BANDAGE_REQUIRED, RESOURCE_REQUIRED_LINEN_BANDAGE, RESOURCE_STATE_LINEN_BANDAGE));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_BANDAGES, RESOURCE_STATE_SILK_BANDAGE_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_SILK_BANDAGE) ? 0 : sWorld->getWorldState(RESOURCE_STATE_SILK_BANDAGE), RESOURCE_STATE_SILK_BANDAGE_REQUIRED, RESOURCE_REQUIRED_SILK_BANDAGE, RESOURCE_STATE_SILK_BANDAGE));

    // Cooked Goods
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_COOKED_GOODS, RESOURCE_STATE_LEAN_WOLF_STEAK_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_LEAN_WOLF_STEAK) ? 0 : sWorld->getWorldState(RESOURCE_STATE_LEAN_WOLF_STEAK), RESOURCE_STATE_LEAN_WOLF_STEAK_REQUIRED, RESOURCE_REQUIRED_LEAN_WOLF_STEAK, RESOURCE_STATE_LEAN_WOLF_STEAK));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_COOKED_GOODS, RESOURCE_STATE_SPOTTED_YELLOWTAIL_CURRENT_A, !sWorld->getWorldState(RESOURCE_STATE_SPOTTED_YELLOWTAIL_A) ? 0 : sWorld->getWorldState(RESOURCE_STATE_SPOTTED_YELLOWTAIL_A), RESOURCE_STATE_SPOTTED_YELLOWTAIL_REQUIRED, RESOURCE_REQUIRED_SPOTTED_YELLOWTAIL, RESOURCE_STATE_SPOTTED_YELLOWTAIL_A));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_COOKED_GOODS, RESOURCE_STATE_SPOTTED_YELLOWTAIL_CURRENT_H, !sWorld->getWorldState(RESOURCE_STATE_SPOTTED_YELLOWTAIL_H) ? 0 : sWorld->getWorldState(RESOURCE_STATE_SPOTTED_YELLOWTAIL_H), RESOURCE_STATE_SPOTTED_YELLOWTAIL_REQUIRED, RESOURCE_REQUIRED_SPOTTED_YELLOWTAIL, RESOURCE_STATE_SPOTTED_YELLOWTAIL_H));
    resources.push_back(Resources(TEAM_HORDE, RESOURCE_CATEGORY_COOKED_GOODS, RESOURCE_STATE_BAKED_SALMON_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_BAKED_SALMON) ? 0 : sWorld->getWorldState(RESOURCE_STATE_BAKED_SALMON), RESOURCE_STATE_BAKED_SALMON_REQUIRED, RESOURCE_REQUIRED_BAKED_SALMON, RESOURCE_STATE_BAKED_SALMON));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_COOKED_GOODS, RESOURCE_STATE_RAINBOW_FIN_ALBACORE_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_RAINBOW_FIN_ALBACORE) ? 0 : sWorld->getWorldState(RESOURCE_STATE_RAINBOW_FIN_ALBACORE), RESOURCE_STATE_RAINBOW_FIN_ALBACORE_REQUIRED, RESOURCE_REQUIRED_RAINBOW_FIN_ALBACORE, RESOURCE_STATE_RAINBOW_FIN_ALBACORE));
    resources.push_back(Resources(TEAM_ALLIANCE, RESOURCE_CATEGORY_COOKED_GOODS, RESOURCE_STATE_ROAST_RAPTOR_CURRENT, !sWorld->getWorldState(RESOURCE_STATE_ROAST_RAPTOR) ? 0 : sWorld->getWorldState(RESOURCE_STATE_ROAST_RAPTOR), RESOURCE_STATE_ROAST_RAPTOR_REQUIRED, RESOURCE_REQUIRED_ROAST_RAPTOR, RESOURCE_STATE_ROAST_RAPTOR));
}

void ProgressionMgr::SaveAllResources()
{
    for (auto &resource : resources)
    {
        sWorld->setWorldState(resource.state, resource.current_amount);
    }
}

void ProgressionMgr::AddToResource(uint32 state, uint32 value)
{
    for (int i = 0; i < resources.size(); i++)
    {
        if (resources[i].state == state)
        {
            resources[i].current_amount += value;
            break;
        }
    }
}

void ProgressionMgr::SendResourceCategoryToPlayer(Player* player, uint8 team, uint8 category)
{
    for (auto& resource : resources)
    {
        if (resource.team == team && resource.category == category)
        {
            player->SendUpdateWorldState(resource.current_id, resource.current_amount);
            player->SendUpdateWorldState(resource.required_id, resource.required_amount);
        }
    }
}
